generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model customer {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  contact     String?   @db.VarChar(255)
  address     String?   @db.VarChar(255)
  joined_date DateTime? @db.Timestamp(6)
  user_id     String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model owner {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(255)
  contact     String?   @db.VarChar(255)
  address     String?   @db.VarChar(255)
  joined_date DateTime? @db.Timestamp(6)
  user_id     String    @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  user        user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model service {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String   @db.VarChar(255)
  description  String?  @db.VarChar(255)
  service_type String?  @db.VarChar(255)
  price        Int?
  duration     Int?
  startup_id   String   @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  startup      startup  @relation(fields: [startup_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model startup {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?   @db.VarChar(255)
  founded_date DateTime? @db.Timestamp(6)
  industry     String?   @db.VarChar(255)
  location     String?   @db.VarChar(255)
  name         String    @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  user_id      String    @db.Uuid
  tenant_id    String    @db.VarChar(255)
  service      service[]
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team_member {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @db.VarChar(255)
  position      String?   @db.VarChar(255)
  joined_date   DateTime? @db.Timestamp(6)
  experience    Int?
  qualification String?   @db.VarChar(255)
  user_id       String    @db.Uuid
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @default(now()) @db.Timestamp(6)
  user          user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String        @unique @db.VarChar(255)
  firstName   String?       @db.VarChar(255)
  lastName    String?       @db.VarChar(255)
  roq_user_id String        @db.VarChar(255)
  tenant_id   String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  customer    customer[]
  owner       owner[]
  startup     startup[]
  team_member team_member[]
}
